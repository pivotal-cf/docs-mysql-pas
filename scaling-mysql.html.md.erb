---
title: Scaling Internal MySQL
owner: MySQL
---

This topic describes scaling down your <%= vars.app_runtime_first %> MySQL cluster and provides example sizing data from two environments that have significant load on their MySQL clusters.

For additional resources about scaling Internal MySQL, see the [Deployments Using Internal MySQL](../operating/scaling-ert-components.html#internal-mysql) section of the _Scaling <%= vars.app_runtime_abbr %>_ topic and the [Scalable Components](../concepts/high-availability.html#processes) section of the _High Availability in <%= vars.app_runtime_abbr %>_ topic.

<p class="note"><strong>Note:</strong> The procedure does not apply to databases configured as external in the <strong>Databases</strong> pane of the <%= vars.app_runtime_abbr %> tile.</p>

<%= vars.app_runtime_abbr %> components that use system databases include the Cloud Controller, Diego Brain, Gorouter, and User Authorization and Authentication (UAA) server. For more information, see [<%= vars.app_runtime_abbr %> Components](../concepts/architecture/index.html).


## <a id='scale-down'></a> Scale Down Your MySQL Cluster

This procedure explains how to safely scale your MySQL cluster down to a single node. If you are already running the MySQL cluster with a single node, you do not need to do this procedure.

By default, internal MySQL deploys as a single node. To take advantage of the high availability features of MySQL, you may have scaled the configuration up to three or more server nodes.

### <a id="check-health"></a> Check the Health of Your Cluster

Before scaling down your MySQL cluster, you must ensure the cluster is healthy.

To check the health of your cluster:

1. Use the Cloud Foundry Command Line Interface (cf CLI) to target the API endpoint of your <%= vars.platform_name %> deployment. Run:

	```
	cf api api.YOUR-SYSTEM-DOMAIN
	```
	Where `YOUR-SYSTEM-DOMAIN` is the system domain defined in the **Domains** pane of the <%= vars.app_runtime_abbr %> tile.

1. To obtain your UAA admin user credentials:
	1. Click the **Credentials** tab of the <%= vars.app_runtime_abbr %> tile.
	1. Locate the **Admin Credentials** entry in the **UAA** section.
	1. Click **Link to Credential**.

1. Log in with the UAA admin credentials you obtained in the previous step by running:

	```
	cf login -u admin
	```

1. Create a test organization to verify the database across all nodes by running:

	```
	cf create-org data-integrity-test-organization
	```

1. To obtain the IP addresses of your MySQL server:
	1. From the <%= vars.ops_manager %> Installation Dashboard, click the <%= vars.app_runtime_abbr %> tile.
	1. Click the **Status** tab.
	1. Record the IP addresses for all instances of the **MySQL Server** job.

1. To retrieve Cloud Controller database credentials from CredHub using the <%= vars.ops_manager %> API:
    1. Follow the procedures in [Using the <%= vars.ops_manager %> API](https://docs.pivotal.io/platform/<%= vars.current_major_version %>/customizing/ops-man-api.html) to authenticate and access the <%= vars.ops_manager %> API.
    1. Retrieve a list of deployed products by running:

        ```
        curl "https://OPS-MANAGER-FQDN/api/v0/deployed/products" \
        -X GET \
        -H "Authorization: Bearer UAA-ACCESS-TOKEN"
        ```

        Where:
        <ul>
          <li><code>OPS-MANAGER-FQDN</code> is the fully-qualified domain name (FQDN) of your <%= vars.ops_manager %> deployment.</li>
          <li><code>UAA-ACCESS-TOKEN</code> is the access token you recorded in the previous step.</li>
        </ul>

    1. In the response to the above request, locate the product with an `installation_name` starting with `cf-` and copy its `guid`.
    1. Run:

        ```
        curl "https://OPS-MANAGER-FQDN/api/v0/deployed/products/PRODUCT-GUID/variables?name=cc-db-credentials" \
        -X GET \
        -H "Authorization: Bearer UAA-ACCESS-TOKEN"
        ```

        Where:
        <ul>
          <li><code>OPS-MANAGER-FQDN</code> is the fully-qualified domain name (FQDN) of your <%= vars.ops_manager %> deployment.</li>
          <li><code>PRODUCT-GUID</code> is the value of <code>guid</code> you recorded in the previous step.</li>
          <li><code>UAA-ACCESS-TOKEN</code> is the access token you recorded in the previous step.</li>
        </ul>

    1. Record the Cloud Controller database `username` and `password` from the response to the above request.

1. SSH into the <%= vars.ops_manager %> VM. Because the procedures vary by IaaS, see the [SSH into <%= vars.ops_manager %>](https://docs.pivotal.io/platform/<%= vars.current_major_version %>/customizing/trouble-advanced.html#ssh) section of the _Advanced Troubleshooting with the BOSH CLI_ topic for instructions specific to your IaaS.

1. For each of the MySQL server IP addresses recorded above:
    1. Query the new organization by running:

        ```
        mysql -h YOUR-IP -u YOUR-IDENTITY -D ccdb -p -e "select created_at, name from organizations where name = 'data-integrity-test-organization'"
        ```

        Where:
        <ul>
          <li><code>YOUR-IP</code> is the IP address of the MySQL server.</li>
          <li><code>YOUR-IDENTITY</code> is the <code>identity</code> value of the CCDB credentials you obtained above.</li>
        </ul>

    1. When prompted, provide the `password` value of the CCDB credentials you obtained above.
    1. Examine the output of the `mysql` command and verify the `created_at` date is recent. For example:
        <pre class="terminal">
        +---------------------+----------------------------------+
        | created_at          | name                             |
        +---------------------+----------------------------------+
        | 2016-05-28 01:11:42 | data-integrity-test-organization |
        +---------------------+----------------------------------+
        </pre>

1. If each MySQL server instance does not return the same `created_at` result, contact [Pivotal Support](https://support.pivotal.io/) before proceeding further or making any changes to your deployment. If each MySQL server instance does return the same result, then you can safely proceed to scaling down your cluster to a single node by performing the steps in the following section.

### <a id="scale-down"></a> Set Server Instance Count to 1

To scale your server instance count to 1:

1. Select **Resource Config** in the <%= vars.app_runtime_abbr %> tile.

1. Use the dropdown to change the **Instances** count for **MySQL Server** to `1`.

1. Click **Save**, then **Review Pending Changes** and **Apply Changes** to apply the changes.

1. Delete your test organization by running:

	```
	cf delete-org data-integrity-test-organization
	```


## <a id='sizing-examples'></a> MySQL Cluster Sizing Example

This topic describes a sizing example for internal MySQL in <%= vars.app_runtime_abbr %>.

Use this data as guidance to ensure your MySQL Clusters are scaled to handle the number of app instances running on your deployment.

### <a id="diego"></a> Example: Cloud Foundry Diego Test Environment

The information in this section comes from an environment used by the Diego to test the MySQL cluster with a high load similar to one generated large deployment.

* **IAAS**: GCP
* **App Instances**: 250,000
* **Average SQL Queries Per Minute**: ~5,100,000
* **Average IOPS**:
	* **Reads**: 3.63
	* **Writes**: 363.98

#### <a id="diego-sizing"></a> VM Sizing

The following table displays MySQL VM settings for this environment:

| Setting | Value |
| ------- | ----- |
| VM Type | n1-standard-16 |
| Storage Volume Type | pd-ssd |
| Storage Volume Size | 1&nbsp;TB |
